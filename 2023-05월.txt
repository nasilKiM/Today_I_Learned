TIL

2023-05-04

1. React-hook-from
 - 참고 페이지 : https://www.npmjs.com/package/react-hook-form

 - 실제 프로젝트에 적용: zoop zoop 마켓
 - 의문점(아래)
 - 코드 : useRef 사용이 적절한지에 대한 의문

    (현재)
    <input
    {...register('confirmPW', {
    required: true,
    validate: value => {
    if (watch('password') !== value) {
    return '비밀번호를 다시 확인해 주세요';
    }
    },
    })}
    placeholder="PW check"
    type="password"
    />

    (변경고려 부분)
    const password = useRef();
    ...
    <label>Password Confirm</label>
    <input
    type="password"
    name="password_confirm"
    ref={register({
    required: true,
    validate: (value) =>
    value === password.current
    })}
    />


2023-05-07
2. 물품등록 관련
 (1) 등록실패(signUp, login)과 똑같이 하니, 백엔드에서 계속 error 메세지...
  -> 해결방법 : api.docs 에서 form 형태로 데이터를 보내는 예시를 보고 FormData 형태로 변형

   	const onSubmit = data => {
		try {
			const formData = new FormData();
			formData.append('title', data.title);
			formData.append('price', Number(data.price));
			formData.append('category', Number(data.price) === 0 ? 1 : 0);
			formData.append('description', data.content);
			formData.append('region', searchResult);
			formData.append('tag', [data.tag]);
			formData.append('images', data.mainImg);
			Axios.post('/api/product', formData);
			alert('물품등록이 완료되었습니다.');
		} catch (err) {
			return console.log(err);
		}
	};

  (2) 이미지 업로드 관련

   (1) 문제인식 : useRef() 와 react-hook-form 의 register를 함께쓰면 오류발생
   (2) 문제해결 : 아래 코드 확인
    <input
				id="mainImg"
				type="file"
				accept="image/*"
				multiple
				style={{ display: 'none' }}
				{...register('mainImg')}
				onChange={e => {
					register('mainImg').onChange(e);
					onUpload(e);
				}}
			/>


2023-05-08

1. **에러해결 ?!**
    1. 문제점 : 물품등록 시, 이미지가 제대로 전달되지않음 (강사님 답변: 이미지 전송 방식의 문제)
    2. 문제해결접근 : **formData** 객체로 데이터를 보낼때 방식을 검색
    3. 해결코드
        
        ```
        [...data.mainImg].forEach(element => {
        				formData.append('images', element);
        			});
        			// 참고 : https://pobsiz.tistory.com/12 (3번)
        			// 같은 키값에 코드를 여러번 실행시켜야함
        			Axios.post('/api/product', formData, {
        				headers: { 'Content-Type': 'multipart/form-data' },
        			});
        ```
        
2. 태그 추가 로직 수정
    1. (이전) 태그를 입력하는 input 창과, 태그 관련 오류를 검사하는 input을 2개를 둠.
    2. (개선) 오류검사를 따로진행
        1. react-hook-form 에 있는 setError, clearErrors 기능을 활용
        2. onSubmit 함수에 아래 로직을 추가
            
            ```
            if (tags.length === 0) {
            			//리액트 훅폼으로 에러메세지 셋팅
            			setError(
            				'tag', //에러 이름. 기존에 있는 것과 겹칠시 그쪽으로 에러 들어감
            				{ message: '1개이상 꼭 입력해주세요.' }, //errors에 넣을 에러 메시지
            				{ shouldFocus: true }, //에러 발생시 해당 구간에 포커스하게 하는 설정
            			);
            			return;
            		} else setValue('', ''); //값이 유효하면 set!
            ```
            
        3. 그리고 엔터키를 눌러 태그를 추가할때마다 에러초기화
            
            ```
            const handleKeyDown = e => {
            		if (e.keyCode === 13) {
            			clearErrors('tag'); // 에러초기화
            ```
            
3. 카드 컴포넌트에 데이터 담아서 뿌리기(메인)
